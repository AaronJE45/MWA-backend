generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [authorId], references: [id])
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  authorId     Int
  discussionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User       @relation(fields: [authorId], references: [id])
  Discussion   Discussion @relation(fields: [discussionId], references: [id])
}

model Discussion {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  User      User      @relation(fields: [authorId], references: [id])
}

enum HomeworkStatus {
  ASSIGNED
  SUBMITTED
  GRADED
}

model Homework {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  url         String
  authorId    Int            // Tutor/Admin who created the homework
  studentId   Int?           // Student who submitted the homework (nullable)
  dueDate     DateTime
  status      HomeworkStatus @default(ASSIGNED)
  grade       String?
  submittedAt DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?      // Soft delete
  User        User           @relation("HomeworkAuthor", fields: [authorId], references: [id])
  Student     User?          @relation("HomeworkStudent", fields: [studentId], references: [id])

  @@index([authorId])
  @@index([studentId])
  @@index([dueDate])
}

model Resource {
  id        Int      @id @default(autoincrement())
  title     String
  type      String
  url       String
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [authorId], references: [id])
}

model User {
  id                Int            @id @default(autoincrement())
  name              String 
  email             String         @unique
  password          String
  role              Role           @default(STUDENT)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  CreatedHomework   Homework[]     @relation("HomeworkAuthor")
  SubmittedHomework Homework[]     @relation("HomeworkStudent")
  Announcement      Announcement[]
  Comment           Comment[]
  Discussion        Discussion[]
  Resource          Resource[]
}
